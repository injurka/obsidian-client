import type { Dirent } from 'node:fs' // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø Dirent –¥–ª—è readdir
import fs from 'node:fs/promises' // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–∏—Å—ã –∏–∑ fs
import path from 'node:path'

// --- –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö ---
enum ContentNavItemType {
  File = 'file',
  Directory = 'directory',
}

interface ContentNavItem {
  sysname: string
  title: string
  type: ContentNavItemType
  children?: ContentNavItem[] // –î–µ—Ç–∏ –º–æ–≥—É—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ —É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
}

// --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
const NAV_FILENAME: string = 'nav.json'
const IMAGE_DEST_FOLDER: string = '_' // –ü–∞–ø–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∫–æ—Ä–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è

// --- –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è ---
const FRONT_MATTER_REGEX: RegExp = /^---\s*([\s\S]*?)\s*---/
const SYSNAME_REGEX: RegExp = /^\s*sysname:\s*"?([^"\s]+)"?\s*$/m
const OBSIDIAN_LINK_REGEX: RegExp = /(?<!!)\[\[([^|\]\n]+)(?:\|([^\]\n]+))?\]\]/g

// --- –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å) ---
const IMAGE_EXTENSIONS: Set<string> = new Set([
  '.png',
  '.jpg',
  '.jpeg',
  '.gif',
  '.svg',
  '.webp',
  '.bmp',
  '.tiff',
])

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
 * @param extension - –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '.png').
 * @returns true, –µ—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏–Ω–∞—á–µ false.
 */
function isImageExtension(extension: string): boolean {
  return IMAGE_EXTENSIONS.has(extension.toLowerCase())
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç sysname –∏–∑ YAML front matter —Ñ–∞–π–ª–∞.
 * @param filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É.
 * @returns –ü—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ–º sysname –∏–ª–∏ null, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç.
 */
async function extractSysnameFromFrontMatter(filePath: string): Promise<string | null> {
  let fileHandle: fs.FileHandle | undefined
  try {
    // –ß–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã —Ü–µ–ª–∏–∫–æ–º
    fileHandle = await fs.open(filePath, 'r')
    const buffer = Buffer.alloc(1024) // –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–∏–ª–æ–±–∞–π—Ç
    const { bytesRead } = await fileHandle.read(buffer, 0, 1024, 0)

    if (bytesRead === 0) {
      return null
    }

    const contentStart: string = buffer.toString('utf8', 0, bytesRead)
    const frontMatterMatch = contentStart.match(FRONT_MATTER_REGEX)

    if (frontMatterMatch?.[1]) { // –ò—Å–ø–æ–ª—å–∑—É–µ–º optional chaining
      const yamlContent = frontMatterMatch[1]
      const sysnameMatch = yamlContent.match(SYSNAME_REGEX)
      if (sysnameMatch?.[1]) { // –ò—Å–ø–æ–ª—å–∑—É–µ–º optional chaining
        return sysnameMatch[1] // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ sysname
      }
    }
  }
  catch (error: any) { // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å unknown –∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å)
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—Ç –ø—Ä–∞–≤), front matter –Ω–µ –±—É–¥–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω
    console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å front matter –∏–∑ —Ñ–∞–π–ª–∞ ${filePath}: ${error.message}`)
  }
  finally {
    // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –æ—Ç–∫—Ä—ã—Ç
    await fileHandle?.close()
  }
  return null // Front matter –∏–ª–∏ sysname –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
}

/**
 * Ensures a directory exists for a given file path.
 */
async function ensureDirectoryExists(filePath: string): Promise<void> {
  const directory = path.dirname(filePath)
  try {
    await fs.mkdir(directory, { recursive: true })
  }
  catch (error: any) {
    // Ignore if directory already exists
    if (error.code !== 'EEXIST') {
      throw error
    }
  }
}

/**
 * Safely copies a file, ensuring the destination directory exists.
 */
async function safeCopyFile(sourcePath: string, destPath: string): Promise<void> {
  try {
    // First check if the source file exists
    await fs.access(sourcePath, fs.constants.F_OK)

    // Ensure destination directory exists
    await ensureDirectoryExists(destPath)

    // Copy the file
    await fs.copyFile(sourcePath, destPath)
  }
  catch (error: any) {
    if (error.code === 'ENOENT') {
      console.error(`Error: Source file does not exist: ${sourcePath} `)
    }
    else {
      console.error(`Error copying file from ${sourcePath} to ${destPath}: ${error.message} `)
    }
    throw error // Re-throw to allow caller to handle
  }
}

/**
 * Recursively scans the source directory to build a map of base file names to their final URL paths.
 * @param sourceBasePath - The root source directory for this run (e.g., '../marks/Personal Note/Travel').
 * @param currentSourcePath - The current directory being scanned.
 * @param navigationSysname - The root sysname for this section (e.g., 'Travel').
 * @param fileMap - The Map object to populate (baseName -> URL).
 */
async function buildFileMapRecursive(
  sourceBasePath: string,
  currentSourcePath: string,
  navigationSysname: string,
  fileMap: Map<string, string>, // Map<BaseFileName, TargetURL>
): Promise<void> {
  try {
    const entries: Dirent[] = await fs.readdir(currentSourcePath, { withFileTypes: true })

    for (const entry of entries) {
      const entryName = entry.name
      const sourceFullPath = path.join(currentSourcePath, entryName)
      const extension = path.extname(entryName)

      if (entryName.startsWith('.') || entryName === IMAGE_DEST_FOLDER || (entry.isDirectory() && entryName === '-')) {
        continue // Skip hidden, image folder, or special '-' folder
      }

      if (entry.isDirectory()) {
        // Recursively scan subdirectory
        await buildFileMapRecursive(sourceBasePath, sourceFullPath, navigationSysname, fileMap)
      }
      else if (entry.isFile() && extension.toLowerCase() === '.md') {
        // Process Markdown files
        const baseName = path.basename(entryName, extension) // e.g., "10 (—Å–±) - –ù–∞—á–∞–ª–æ –ø—É—Ç–∏"
        const frontMatterSysname = await extractSysnameFromFrontMatter(sourceFullPath)

        // Determine the filename part of the URL (use sysname if available, else baseName)
        const urlFileNamePart = frontMatterSysname ?? baseName

        // Calculate the relative path from the sourceBasePath for the URL structure
        const relativePathFromSourceBase = path.relative(sourceBasePath, path.dirname(sourceFullPath))

        // Construct the final relative path for the URL (directory + filename part)
        // Ensure forward slashes for URL
        const finalRelativePath = path.join(relativePathFromSourceBase, urlFileNamePart).replace(/\\/g, '/')

        // Construct the full URL: /{navigation.sysname}/relative/path/to/file
        // NOTE: We are NOT URL-encoding path segments here to match the example output.
        // Consider adding encodeURIComponent if needed for web server compatibility.
        const targetUrl = `/ ${navigationSysname}/${finalRelativePath}`

        if (fileMap.has(baseName)) {
          console.warn(`‚ö†Ô∏è Duplicate base file name found: "${baseName}". Link resolution might be ambiguous. Using path: ${targetUrl}`)
        }
        // Add to map
        fileMap.set(baseName, targetUrl)
        // console.log(`üó∫Ô∏è Mapped: "${baseName}" -> ${targetUrl}`); // Debug logging
      }
    }
  }
  catch (error: any) {
    console.error(`Error scanning directory for map ${currentSourcePath}:`, error.message)
  }
}

async function processDirectoryRecursive(
  sourceCurrentPath: string,
  destBasePath: string,
  relativePath: string,
  imageDestPath: string,
  fileMap: Map<string, string>,
  navigationSysname: string,
): Promise<ContentNavItem[]> {
  const childrenNavItems: ContentNavItem[] = []
  try {
    const entries: Dirent[] = await fs.readdir(sourceCurrentPath, { withFileTypes: true })

    for (const entry of entries) {
      const entryName = entry.name
      const sourceFullPath = path.join(sourceCurrentPath, entryName)
      const extension = path.extname(entryName)

      // --- –ü—Ä–∞–≤–∏–ª–∞ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è ---
      if (entryName.startsWith('.'))
        continue // –°–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã/–ø–∞–ø–∫–∏
      if (entry.isDirectory() && entryName === '-')
        continue // –ü–∞–ø–∫–∞ '-' (–µ—Å–ª–∏ —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ)

      // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---
      if (entry.isFile() && isImageExtension(extension)) {
        const targetImagePath = path.join(imageDestPath, entryName)
        try {
          await fs.copyFile(sourceFullPath, targetImagePath)
          console.log(`üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: ${entryName} -> ${IMAGE_DEST_FOLDER}/`)
        }
        catch (copyError: any) {
          console.error(`–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${entryName}:`, copyError.message)
        }
        continue // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ nav.json
      }

      // --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∏ –±–∞–∑–æ–≤—ã—Ö –∏–º–µ–Ω ---
      const type = entry.isDirectory() ? ContentNavItemType.Directory : ContentNavItemType.File
      // Title - –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
      const title = path.basename(entryName, extension)

      let sysname = entryName // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é sysname = –∏–º—è —Ñ–∞–π–ª–∞/–ø–∞–ø–∫–∏
      let targetName = entryName // –ò–º—è —Ñ–∞–π–ª–∞/–ø–∞–ø–∫–∏ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      let currentChildren: ContentNavItem[] | undefined

      // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ (–∏–∑–≤–ª–µ—á–µ–Ω–∏–µ sysname, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ targetName) ---
      if (type === ContentNavItemType.File && extension.toLowerCase() === '.md') {
        const frontMatterSysname = await extractSysnameFromFrontMatter(sourceFullPath)
        if (frontMatterSysname) {
          sysname = frontMatterSysname // –ò—Å–ø–æ–ª—å–∑—É–µ–º sysname –∏–∑ front matter
          targetName = `${sysname}${extension}` // –ù–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ = sysname + .md
        }
        else {
          // –ï—Å–ª–∏ front matter –Ω–µ—Ç, sysname —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
          sysname = title
          // targetName –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º entryName
        }
      }
      else if (type === ContentNavItemType.File) {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤ (–Ω–µ .md –∏ –Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π) –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∫–∞–∫ sysname
        sysname = title
        // targetName –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º entryName
      }
      // –î–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π sysname –∏ targetName –æ—Å—Ç–∞—é—Ç—Å—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º –ø–∞–ø–∫–∏

      // --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ù–ï-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---
      const destRelativePath = path.join(relativePath, targetName)
      const destFullPath = path.join(destBasePath, destRelativePath)

      // --- –°–æ–∑–¥–∞–Ω–∏–µ/–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ ---
      if (type === ContentNavItemType.Directory) {
        // Create directory
        try {
          await fs.mkdir(destFullPath, { recursive: true })
          console.log(`üìÅ Created directory: ${destRelativePath || '/'}`)
        }
        catch (mkdirError: any) {
          console.error(`Error creating directory ${destFullPath}:`, mkdirError.message)
          continue // Skip this directory if we can't create it
        }

        // Process children recursively
        currentChildren = await processDirectoryRecursive(
          sourceFullPath,
          destBasePath,
          destRelativePath, // Use updated relative path for children
          imageDestPath,
          fileMap, // Pass map down
          navigationSysname,
        )
      }
      else if (type === ContentNavItemType.File && extension.toLowerCase() === '.md') {
        // *** Process MD File Content ***
        try {
          let content = await fs.readFile(sourceFullPath, 'utf8')
          let linksFound = 0
          let linksReplaced = 0

          content = content.replace(OBSIDIAN_LINK_REGEX, (match, linkedFile, alias) => {
            linksFound++
            const linkBaseName = linkedFile.trim()
            const linkText = alias ? alias.trim() : linkBaseName
            const targetUrl = fileMap.get(linkBaseName) // Lookup in the map

            if (targetUrl) {
              linksReplaced++
              return `[${linkText}](${targetUrl})`
            }
            else {
              // Keep original link but maybe log a warning
              console.warn(`    ‚ö†Ô∏è Link target not found for "[[${linkBaseName}]]" in file: ${entryName}. Keeping original.`)
              return match // Return original [[...]] link
            }
          })

          if (linksFound > 0) {
            console.log(`üìù Processed ${entryName}: ${linksReplaced}/${linksFound} links replaced.`)
          }

          // Ensure parent directory exists
          await ensureDirectoryExists(destFullPath)

          // Write the modified content to the destination
          await fs.writeFile(destFullPath, content, 'utf8')
          console.log(`‚úçÔ∏è Wrote Markdown file: ${destRelativePath}`)
        }
        catch (readWriteError: any) {
          console.error(`Error processing Markdown file ${entryName}:`, readWriteError.message)
          continue // Skip this file if processing failed
        }
      }
      else {
        // Copy other file types directly
        try {
          console.log(`üìÑ Copying file: ${destRelativePath}`)
          await safeCopyFile(sourceFullPath, destFullPath)
        }
        catch (copyError: any) {
          // Error already logged in safeCopyFile
          continue // Skip this file if copying failed
        }
      }

      // --- –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è nav.json ---
      const navItem: ContentNavItem = {
        sysname,
        title,
        type,
      }
      if (currentChildren && currentChildren.length > 0) { // –î–æ–±–∞–≤–ª—è–µ–º children —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø—É—Å—Ç—ã–µ
        navItem.children = currentChildren
      }

      childrenNavItems.push(navItem)
    }
  }
  catch (error: any) {
    console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${sourceCurrentPath}:`, error.message)
  }

  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –ø–∞–ø–∫–∏ -> —Ñ–∞–π–ª—ã, –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É title
  childrenNavItems.sort((a, b) => {
    if (a.type !== b.type) {
      return a.type === ContentNavItemType.Directory ? -1 : 1
    }
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º localeCompare –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å—Ç—Ä–æ–∫
    return a.title.localeCompare(b.title)
  })

  return childrenNavItems
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
export async function main(
  _sourceDir?: string,
  _exportDir?: string,
  _navigationSysname?: string,
): Promise<void> {
  // process.argv —Å–æ–¥–µ—Ä–∂–∏—Ç: [0: node, 1: script.js, 2: arg1, 3: arg2, ...]
  const sourceDir: string | undefined = _sourceDir ?? process.argv[2]
  const exportDir: string | undefined = _exportDir ?? process.argv[3]
  const navigationSysname: string | undefined = _navigationSysname ?? process.argv[4] ?? path.basename(sourceDir || '')

  if (!sourceDir || !exportDir) {
    console.error('–û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞:')
    console.error('1. –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏')
    console.error('2. –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞')
    console.error('–ü—Ä–∏–º–µ—Ä: node dist/script.js /path/to/source /path/to/export')
    process.exit(1)
  }

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Ç–∏ –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
  const absoluteSourceDir = path.resolve(sourceDir)
  const absoluteExportDir = path.resolve(exportDir)
  const absoluteImageDestPath = path.join(absoluteExportDir, IMAGE_DEST_FOLDER)

  // –û—á–∏—Å—Ç–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
  console.log(`–û—á–∏—Å—Ç–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: ${absoluteExportDir}`)
  await fs.rm(absoluteExportDir, { recursive: true, force: true }) // –£–¥–∞–ª—è–µ–º, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  await fs.mkdir(absoluteExportDir, { recursive: true }) // –°–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
  await fs.mkdir(absoluteImageDestPath, { recursive: true }) // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π '_'

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    try {
      const sourceStats = await fs.stat(absoluteSourceDir)
      if (!sourceStats.isDirectory()) {
        throw new Error(`–ò—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å "${absoluteSourceDir}" –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–µ–π.`)
      }
    }
    catch (statError: any) {
      if (statError.code === 'ENOENT') {
        throw new Error(`–ò—Å—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è "${absoluteSourceDir}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`)
      }
      throw statError // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ stat
    }

    console.log(`–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${absoluteSourceDir}`)
    console.log(`–≠–∫—Å–ø–æ—Ä—Ç –≤: ${absoluteExportDir}`)
    console.log(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤: ${absoluteImageDestPath}`)

    const fileMap = new Map<string, string>()

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ JSON
    const navigationStructure: ContentNavItem[] = await processDirectoryRecursive(
      absoluteSourceDir,
      absoluteExportDir,
      '',
      absoluteImageDestPath,
      fileMap,
      navigationSysname,
    )

    // –ó–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞ nav.json
    const navFilePath = path.join(absoluteExportDir, NAV_FILENAME)
    await fs.writeFile(navFilePath, JSON.stringify(navigationStructure, null, 2))

    console.log(`\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`)
    console.log(`–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ ${absoluteExportDir}`)
    console.log(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–º–µ—â–µ–Ω—ã –≤ ${absoluteImageDestPath}`)
    console.log(`–§–∞–π–ª –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${navFilePath}`)
  }
  catch (error: any) {
    // –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞ try/catch –≤ main
    if (error instanceof Error) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–±—ä–µ–∫—Ç Error
      console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error.message)
      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–≤–æ–¥ —Å—Ç–µ–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: console.error(error.stack);
    }
    else {
      console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
    }
    process.exit(1)
  }
}

export async function clean(_sourceDir?: string, _exportDir?: string): Promise<void> {
  // process.argv —Å–æ–¥–µ—Ä–∂–∏—Ç: [0: node, 1: script.js, 2: arg1, 3: arg2, ...]
  const exportDir: string | undefined = _exportDir ?? process.argv[3]

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Ç–∏ –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
  const absoluteExportDir = path.resolve(exportDir)
  const absoluteImageDestPath = path.join(absoluteExportDir, IMAGE_DEST_FOLDER)

  // –û—á–∏—Å—Ç–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
  console.log(`–û—á–∏—Å—Ç–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: ${absoluteExportDir}`)
  await fs.rm(absoluteExportDir, { recursive: true, force: true }) // –£–¥–∞–ª—è–µ–º, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  await fs.mkdir(absoluteExportDir, { recursive: true }) // –°–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
  await fs.mkdir(absoluteImageDestPath, { recursive: true }) // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π '_'
}
